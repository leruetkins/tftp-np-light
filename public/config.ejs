<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width,user-scalable=no" />
  <meta name="format-detection" content="telephone=no" />
  <meta name="renderer" content="webkit" />
  <meta name="wap-font-scale" content="no" />
  <title>TFTP-NP <%- version %></title>
  <link rel="stylesheet" type="text/css" href="/assets/css/index.css" />
</head>

<body class="root-dir">

  <div class="panel breadcrumbs main" style="text-align: center;">
    <strong><a href="/"><%- news_notify %>Main</a>|</strong>
    <strong><a href="/files">Files</a>|</strong>
    <strong><a href="/config">Config</a>|</strong>
    <strong><a href="/menu_editor">iPXE menu</a>|</strong>
    <strong><a href="/credits">Credits</a></strong>
  </div>

  
    <div class="panel" style="min-height: 20px; text-align: center;"><h3 id="notification"></h3></div>
  <div class="panel" id="result">
    
  </div>
  <div class="panel" class="btn-group" style="text-align: center;">
    <button id="get" onclick="getData()">Get Config</button>
    <button id="write" onclick="sendData()">Set Config</button>
  </div>


  


  <script>
    // Функция для отправки POST-запроса и получения JSON-данных
    async function postData(url = '', data = { method: "get_config" }) {
      // Опции запроса
      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data) // Преобразование данных в JSON-строку
      };
      // Отправка запроса и ожидание ответа
      const response = await fetch(url, options);
      // Возврат JSON-данных из ответа
      return response.json();
    }

      // Функция для отображения результата на веб-странице
      function displayData(data) {
  document.getElementById("get").disabled = true;
  document.getElementById("write").disabled = true;
  let div = document.getElementById("result");
  div.innerHTML = "";

  // Title for server.data
  let serverTitle = document.createElement("h2");
  serverTitle.textContent = "Server Data";
  div.appendChild(serverTitle);

  // Handle data.server
  if (data.server) {
    let serverEntries = Object.entries(data.server);
    for (let [key, value] of serverEntries) {
      if (value.value === "0" || value.value === "1") {
        let wrapper = document.createElement("div");
        div.appendChild(wrapper);

        let label = document.createElement("label");
        label.textContent = key + ": ";
        label.style.fontWeight = "bold";
        label.style.fontSize = "14px";

        let checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.checked = value.value === "1";
        label.appendChild(checkbox);

        wrapper.appendChild(label);

        let description = document.createElement("div");
        description.classList.add("description");
        description.textContent = value.description;
        wrapper.appendChild(description);

        // Add a separator
        let separator = document.createElement("hr");
        wrapper.appendChild(separator);
      } else {
        let p = document.createElement("div");
        p.textContent = key + ": ";
        p.style.fontWeight = "bold";
        p.style.fontSize = "14px";

        let inputBox = document.createElement("input");
        inputBox.type = "text";
        inputBox.value = value.value;
        inputBox.id = key;
        inputBox.name = key;
        p.appendChild(inputBox);

        div.appendChild(p);

        let description = document.createElement("div");
        description.classList.add("description");
        description.textContent = value.description;
        div.appendChild(description);

        // Add a separator
        let separator = document.createElement("hr");
        div.appendChild(separator);
      }
    }
  }

  // Title for share.data
  let shareTitle = document.createElement("h2");
  shareTitle.textContent = "Share Data";
  div.appendChild(shareTitle);

  // Handle data.share
  if (data.share) {
    let shareEntries = Object.entries(data.share);
    for (let [key, value] of shareEntries) {
      if (value.value === "0" || value.value === "1") {
        let wrapper = document.createElement("div");
        div.appendChild(wrapper);

        let label = document.createElement("label");
        label.textContent = key + ": ";
        label.style.fontWeight = "bold";
        label.style.fontSize = "14px";

        let checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.checked = value.value === "1";
        label.appendChild(checkbox);

        wrapper.appendChild(label);

        let description = document.createElement("div");
        description.classList.add("description");
        description.textContent = value.description;
        wrapper.appendChild(description);

        // Add a separator
        let separator = document.createElement("hr");
        wrapper.appendChild(separator);
      } else {
        let p = document.createElement("div");
        p.textContent = key + ": ";
        p.style.fontWeight = "bold";
        p.style.fontSize = "14px";

        let inputBox = document.createElement("input");
        inputBox.type = "text";
        inputBox.value = value.value;
        inputBox.id = key;
        inputBox.name = key;
        p.appendChild(inputBox);

        div.appendChild(p);

        let description = document.createElement("div");
        description.classList.add("description");
        description.textContent = value.description;
        div.appendChild(description);

        // Add a separator
        let separator = document.createElement("hr");
        div.appendChild(separator);
      }
    }
    document.getElementById("notification").innerHTML = "Настройки с сервера получены";
    setTimeout(() => {
      document.getElementById("get").disabled = false;
      document.getElementById("write").disabled = false;
      document.getElementById("notification").innerHTML = "Config";
    }, 2000);
  }
}




    // Функция для вызова функции postData и передачи результата функции displayData
    function getData() {
      postData('/api')
        .then(data => displayData(data));

    }
  </script>

  <script>
    var initialPort;
    // Функция для получения текущего порта из URL
    function getCurrentPort() {
      // Получение текущего URL
      var url = window.location.href;
      // Поиск индекса символа ":"
      var index = url.lastIndexOf(":");
      // Если символ ":" найден, то извлечение подстроки после него и до конца строки или символа "/"
      if (index !== -1) {
        var port = url.substring(index + 1);
        var slashIndex = port.indexOf("/");
        if (slashIndex !== -1) {
          port = port.substring(0, slashIndex);
        }
        // Возвращение порта как числа
        return Number(port);
      } else {
        // Если символ ":" не найден, то возвращение null
        return null;
      }
    }
    // Функция для установки начального значения порта при загрузке страницы
    function setInitialPort() {
      initialPort = getCurrentPort();
    }
    // Вызов функции setInitialPort при загрузке страницы
    window.onload = setInitialPort();
    window.onload = getData();

  </script>


  <script>
    // Функция для отправки данных обратно на сервер
    function sendData() {
      document.getElementById("get").disabled = true;
document.getElementById("write").disabled = true;
// Create an empty object
let data = {};

// Get all elements in result div
let resultDiv = document.getElementById("result");
let elements = Array.from(resultDiv.querySelectorAll("div,h2,label,input"));

let currentSection = "";
// Loop through each element
elements.forEach((element) => {
  // If element is an h2, set the current section
  if (element.tagName === "H2") {
    currentSection = element.textContent.toLowerCase().includes("server") ? "server" : "share";
    return;
  }

  // If element is a label with checkbox
  if (element.tagName === "LABEL" && element.children[0].type === "checkbox") {
    // Get key and value from label text and checkbox checked property
    let key = element.textContent.slice(0, -2);
    let value = element.children[0].checked ? "1" : "0";
    if (currentSection === "server" || currentSection === "share") {
      data[currentSection] = data[currentSection] || {};
      data[currentSection][key] = value;
    }
  }
  // If element is an input box
  else if (element.tagName === "INPUT" && element.type === "text") {
    // Get key and value from the input element's name and value attributes
    let key = element.name;
    let value = element.value;
    if (currentSection === "server" || currentSection === "share") {
      data[currentSection] = data[currentSection] || {};
      data[currentSection][key] = value;
    }
  }
});

// Convert data object to JSON string
let jsonString = JSON.stringify(data);
const formData = new FormData();
formData.append("method", "update_config");
formData.append("data", jsonString);
// Make post request with JSON string as body
fetch('/api', {
  method: 'POST',
  body: formData
});




      var port = Number(document.getElementById("port").value);
      // Получение текущего IP-адреса или доменного имени
      var hostname = window.location.hostname;

      // Проверка, изменился ли порт с начала загрузки страницы
      if (initialPort !== port) {
        //console.log(initialPort, port)
        // Очистка содержимого страницы
        document.body.innerHTML = "";
        // Создание элемента <div> с текстом "Redirecting..."
        var div = document.createElement("div");
        div.textContent = "Redirecting...";
        // Установка стиля элемента <div>
        div.style.fontSize = "36px"; // Большой шрифт
        div.style.textAlign = "center"; // Выравнивание по центру
        div.style.marginTop = "50vh"; // Отступ сверху 50% высоты экрана
        div.style.transform = "translateY(-50%)"; // Смещение вверх на 50% высоты элемента
        // Добавление элемента <div> на страницу
        document.body.appendChild(div);
        // Перенаправление на hostname:port
        setTimeout(function () {
          window.location = "http://" + hostname + ":" + port + "/config";
        }, 5000)
      } else {
        // Вывод сообщения о том, что порт не изменился и перенаправление не требуется
        //alert("Порт не изменился. Перенаправление не требуется.");
      }

      document.getElementById("notification").innerHTML = "Настройки отправлены на сервер";
      setTimeout(() => {
        document.getElementById("get").disabled = false;
        document.getElementById("write").disabled = false;
        document.getElementById("notification").innerHTML = "Config";

      }, 3000);

    }
    
  </script>
  <script>
    function redirect() {
      // Получение значения из поля ввода с id "port"
      var port = document.getElementById("port").value;
      // Перенаправление на http://hostname:port
      window.location = "http://hostname:" + port;
    }
  </script>

</body>

</html>