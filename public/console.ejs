<!DOCTYPE html>
<html lang="en-us" class="h-screen">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE edge" />
    <meta name="viewport" content="width=device-width, user-scalable=no" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="renderer" content="webkit" />
    <meta name="wap-font-scale" content="no" />
    <title>TFTP-NP <%- version %></title>
    <link rel="stylesheet" type="text/css" href="/assets/css/index.css" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="root-dir p-0">
    <div class="panel breadcrumbs main" style="text-align: center">
        <strong><a href="/">Main</a>|</strong>
        <strong><a href="/files">Files</a>|</strong>
        <strong><a href="/config">Config</a>|</strong>
        <strong><a href="/menu_editor">iPXE menu</a>|</strong>
        <strong><a href="/console">Console</a></strong>
    </div>

    <div class="panel credits" style="text-align: center">
        <h3 class="text-sm font-bold">Console</h3>
    </div>


    <div class="panel" style="line-height: 1.5" id="app">
        <!-- Vue.js app will be mounted here -->


        <console />

    </div>


    <!-- Include Vue.js -->
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.27"></script>
    <script>
        const dataStore = Vue.reactive({
            data: {
                message: "",
                console: [],
                send_command: "",
                history_command: [],
                historyIndex: -1,
            },
        });



        const app = Vue.createApp({
            data() {
                return {
                    ...dataStore.data,
                };
            },

            render: () => Vue.h({
                template: `
                        <div class="relative h-full">
                            
                            <div class="mb-3">
                                <input class="bg-gray-900 p-2 w-full text-white" v-model="data.send_command" @keyup.enter="sendMessage"
                                    @keydown.up.prevent="navigateHistory('up')" @keydown.down.prevent="navigateHistory('down')"
                                    @input="handleInput" placeholder='Enter "help" to get help' />
                                <div v-if="data.send_command !== ''"
                                    class="absolute inset-y-1 right-2 flex pl-3 text-gray-500 hover:text-gray-300 dark:text-gray-300 dark:hover:text-white"
                                    @click="clearInput">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                        stroke="currentColor" class="w-6 h-6 cursor-pointer">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </div>
                            </div>

                            <div class="relative">
                                
                                <!-- Button for toggling fullscreen -->
                                <button v-if="isFullScreen = true" @click="toggleFullScreen"
                                    class="text-white hover:bg-slate-700 py-2 px-2 rounded-xl absolute bottom-6 right-6 z-10"
                                    style="opacity: 0.5;">
                                    <!-- SVG Icon dynamically based on fullscreen state -->
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                        stroke="currentColor" class="w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15" />
                                    </svg>
                                </button>

                                <div id="console" class="bg-gray-900 p-0 text-white h-screen overflow-y-auto p-2"
                                    style="height: 70vh; white-space: pre-wrap;">
                                    <ul>
                                        <li v-for="logMessage in data.console.slice().reverse()" class="text-gray-300">
                                            {{ logMessage }}</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        `,
                setup() {
                    const data = dataStore.data;
                    let isFullScreen = false; // Move the variable here

                    const toggleFullScreen = () => {
                        const element = document.getElementById('app');
                        const consoleDiv = document.getElementById('console');

                        const handleFullScreenChange = () => {
                            // Set height based on fullscreen state
                            consoleDiv.style.height = document.fullscreenElement ? '92vh' : '70vh';
                        };



                        if (document.fullscreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled) {
                            if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
                                // Exit fullscreen
                                if (document.exitFullscreen) {
                                    document.exitFullscreen();
                                } else if (document.webkitExitFullscreen) {
                                    document.webkitExitFullscreen();
                                } else if (document.msExitFullscreen) {
                                    document.msExitFullscreen();
                                }
                            } else {
                                // Enter fullscreen
                                if (element.requestFullscreen) {
                                    element.requestFullscreen();
                                } else if (element.webkitRequestFullscreen) {
                                    element.webkitRequestFullscreen();
                                } else if (element.msRequestFullscreen) {
                                    element.msRequestFullscreen();
                                }
                            }

                            // Listen for fullscreenchange event
                            document.addEventListener('fullscreenchange', handleFullScreenChange);
                            document.addEventListener('webkitfullscreenchange', handleFullScreenChange);
                            document.addEventListener('MSFullscreenChange', handleFullScreenChange);


                        }
                    };



                    const sendMessage = () => {
                        console.log("send message");
                        if (socket) {
                            if (data.send_command.toLowerCase() === 'clear') {
                                data.console = [];
                                data.history_command.push(data.send_command);
                                data.historyIndex = -1;
                                data.send_command = "";
                                return
                            } else if (data.send_command.toLowerCase() === 'help') {

                                var consoleWindow = document.getElementById("console");


                                var commands = [
                                    "help - показывает помощь",
                                    "status - показывает статус",
                                    "history - показ последних строк из лога",
                                    "history 10 - показывает 10 последних строк из лога",
                                    "clear - очищает консоль",
                                    "↑ или ↓ - навигация по истории команд" 

                            
                                ];

                                commands.reverse();

                                commands.forEach(function(command) {
                                    data.console.push(command);
                                });
                                data.history_command.push(data.send_command);
                                data.historyIndex = -1;
                                data.send_command = "";
                                return

                                
                            } else if(data.send_command.toLowerCase() === '') {
                                return
                            }
                            data.history_command.push(data.send_command);
                            data.historyIndex = -1;
                            socket.send(JSON.stringify({
                                command: data.send_command
                            }));
                            data.send_command = "";
                        } else {
                            console.error('Socket is not initialized');
                        }
                    };

                    const navigateHistory = (direction) => {
                        const historyLength = data.history_command.length;

                        if (direction === 'up') {
                            if (historyLength > 0) {
                                if (data.historyIndex === -1) {
                                    data.historyIndex = historyLength - 1;
                                } else if (data.historyIndex > 0) {
                                    data.historyIndex--;
                                } else if (data.historyIndex === 0) {
                                    data.send_command = '';
                                    data.historyIndex = -1;
                                    return;
                                }
                                data.send_command = data.history_command[data.historyIndex];
                            }
                        } else if (direction === 'down') {
                            if (data.historyIndex < historyLength - 1) {
                                data.historyIndex++;
                                data.send_command = data.history_command[data.historyIndex];
                            } else if (data.historyIndex === historyLength - 1) {
                                data.send_command = '';
                                data.historyIndex = -1;
                            }
                        }
                    };

                    const handleInput = () => {
                        if (data.send_command === '') {
                            data.historyIndex = -1;
                        }
                    };

                    const clearInput = () => {
                        data.send_command = '';
                    };

                    return {
                        data,
                        sendMessage,
                        navigateHistory,
                        handleInput,
                        clearInput,
                        toggleFullScreen,
                        isFullScreen
                    };
                },
            }),
        });

        app.mount("#app");

        const reconnectInterval = 1000;
        let socket = null;

        function connect() {
            socket = new WebSocket(`ws://${window.location.host}`);

            socket.onmessage = (event) => {
                const message = event.data;

                try {
                    const jsonData = JSON.parse(message);
                    dataStore.data.console.push(jsonData.data);

                } catch (error) {
                    console.error('Error parsing JSON:', error);
                }
            };

            socket.onclose = (event) => {
                if (event.wasClean) {
                    console.log(`Соединение закрыто чисто, код=${event.code} reason=${event.reason}`);
                } else {
                    console.error('Соединение прервано');
                    setTimeout(connect, reconnectInterval);
                }
            };
        }

        connect();
    </script>
</body>

</html>